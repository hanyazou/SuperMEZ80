	page	0
	.z180

;	CP/M 2.2 boot-loader for Z80-Simulator
;
;	Copyright (C) 1988-2007 by Udo Munk
;
;Permission is hereby granted, free of charge, to any person
;obtaining a copy of this software and associated documentation
;files (the "Software"), to deal in the Software without
;restriction, including without limitation the rights to use,
;copy, modify, merge, publish, distribute, sublicense, and/or sell
;copies of the Software, and to permit persons to whom the
;Software is furnished to do so, subject to the following
;conditions:
;
;The above copyright notice and this permission notice shall be
;included in all copies or substantial portions of the Software.
;
;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
;OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
;OTHER DEALINGS IN THE SOFTWARE.
;
	ORG	0		;mem base of boot

UART_180	equ	1	; use Z8S180 serial
UART_PIC	equ	0	; use PIC serial (CPU clock 16MHz limit)
BYTE_RW 	equ	0	; use I/O byte read/write
;
;	I/O ports
;
	if	UART_PIC
CONDAT	EQU	41h		;console data port
	endif

FDCDAT	EQU	48H		;fdc-port: data (non-DMA)
DRIVE   EQU	4ah		;fdc-port: # of drive
TRACK   EQU	4bh		;fdc-port: # of track
SECTOR  EQU	4ch		;fdc-port: # of sector
FDCOP   EQU	4dh		;fdc-port: command
FDCST   EQU	4eh		;fdc-port: status
DMAL    EQU	4fh		;dma-port: dma address low
DMAH    EQU	50h		;dma-port: dma address high

D_DMA_READ	equ	0
D_DMA_WRITE	equ	1
D_READ		equ	2
D_WRITE		equ	3
D_SUCCESS	equ	0
D_ERROR		equ	1


	if	UART_180
IOBASE		EQU	00h
UART_RX		EQU	IOBASE+08h	; UART DATA REGISTOR
UART_TX		EQU	IOBASE+06h
UARTCR_180	EQU	IOBASE+04h	; UART CONTROL REGISTOR
OMCR_V		EQU	0E0H

CLOCK_0		equ	0	; CPU clock = 0.5 x external clock
CLOCK_1		equ	1	; CPU clock = 1.0 x external clock
CLOCK_2		equ	0	; CPU clock = 2.0 x external clock
	endif
;
BOOT:
	JP	COLD
	DEFS	128 - $, 0
;
ERRMSG:	DB	"BOOT: error booting"
	DB	13,10,0
HLOMSG:	DB	"CP/M boot-loader for Z80-Simulator"
CRLF:	DB	13,10,0
;
;	begin the load operation
;
COLD:
	DI
	LD	SP,st_p

	if	UART_180
	; check Z80 or Z80180
	LD	BC,00FFH
	DB	0EDH,4CH	; MLT BC (HD64180)
	LD	A,B
	OR	C
	JR	NZ,ID_Z80

; HD64180R/Z or Z8S180

	LD	A,IOBASE
	OUT0	(3Fh),A
	LD	A,00H		; 0 Wait
	OUT0	(IOBASE+32H),A	; DMA/WAIT Control Register (DCNTL)
	LD	A,00H		; no refresh
	OUT0	(IOBASE+36H),A	; Refresh Control Register (RCR)

;check HD64180R or HD64180Z

	LD	A,7FH		; Try to change OMCR bit 7 to 0
	OUT0	(IOBASE+3EH),A
	IN0	A,(IOBASE+3EH)
	AND	80H
	JR	NZ, ID_180R	; HD64180R

;check HD64180Z(Z80180) or Z8S180

	LD	A,OMCR_V
	OUT0	(IOBASE+3EH),A	; Restore OMCR

	XOR	A
	OUT0	(IOBASE+12H),A
	IN0	A,(IOBASE+12H)
	AND	40H
	JR	NZ,ID_180Z

; Z8S180

;; CPU clock = 2.0 x external clock
	IF	CLOCK_2
	LD	A,80H		; Clock Divide XTAL/1 Bit 7=1
	OUT0	(IOBASE+1FH),A	; CPU Control Register (CCR)
	LD	A,0FFH		; X2 Clock Multiplier Mode : Enable Bit 7=1
	OUT0	(IOBASE+1EH),A	; Clock Multiplier Register (CMR)
	ENDIF

;; CPU clock = 1.0 x external clock
	IF	CLOCK_1
	LD	A,80H		; Clock Divide XTAL/1 Bit 7=1
	OUT0	(IOBASE+1FH),A	; CPU Control Register (CCR)
	LD	A,07FH		; X2 Clock Multiplier Mode : Enable Bit 7=1
	OUT0	(IOBASE+1EH),A	; Clock Multiplier Register (CMR)
	ENDIF

;; CPU clock = 0.5 x external clock
	IF	CLOCK_0
	LD	A,00H		; Clock Divide XTAL/1 Bit 7=1
	OUT0	(IOBASE+1FH),A	; CPU Control Register (CCR)
	LD	A,07FH		; X2 Clock Multiplier Mode : Enable Bit 7=1
	OUT0	(IOBASE+1EH),A	; Clock Multiplier Register (CMR)
	ENDIF

	;; HD64180Z and HD64180R
ID_180R:
ID_180Z:
	LD	A,64h		; 8bit, no parity, 1 stop bit
	OUT0	(IOBASE+00h),A	; ASCI control register A ch0
	LD	A,07h		; x16, external serial clock
	OUT0	(IOBASE+02h),A	; ASCI control register B ch0
	endif

ID_Z80:
	LD	HL,HLOMSG
	call	STROUT

; load boot
	LD	BC,1		;b=track 0, c=sector 1
	LD	HL,BOOT		;base transfer address
	XOR	A		;select drive A
	OUT	(DRIVE),A
	LD	A,B		;set track
	OUT	(TRACK),A
	LD	A,C		;set sector
	OUT	(SECTOR),A

	if BYTE_RW

	LD	A,D_READ	;read sector (non-DMA)
	OUT	(FDCOP),A
	IN	A,(FDCST)	;get status of fdc
	OR	A		;read successful ?
	JP	NZ,ERR_STOP
	LD	E,128		;128 bytes per sector
LBYTE:
	IN	A,(FDCDAT)
	LD	(HL),A
	INC	HL
	DEC	E
	JP	NZ,LBYTE
	JP	BOOT		;goto BOOT

	else

	LD	A,L		;set dma address low
	OUT	(DMAL),A
	LD	A,H		;set dma address high
	OUT	(DMAH),A
	LD	A,D_DMA_READ	;read sector (DMA)
	OUT	(FDCOP),A
	IN	A,(FDCST)	;get status of fdc
	OR	A		;read successful ?
	JP	Z,BOOT	

	endif
;
ERR_STOP:
	ADD	A,'0'		;print error status
	call	CONOUT
	ld	hl, CRLF
	call	STROUT
	LD	HL,ERRMSG	;print error message
	call	STROUT
	HALT			;and halt cpu
;
;;
	if	UART_PIC
STROUT:
	LD	A,(HL)
	OUT	(CONDAT),A
	INC	HL
	OR	A
	JP	NZ,STROUT
	RET

CONOUT:
	OUT	(CONDAT),A
	ret
	endif

	if UART_180
STROUT:
	ld	a,(hl)
	or	a
	ret	z
	ld	e, a
ST1:
	IN0	A,(UARTCR_180)
	BIT	1,A
	JR	Z,ST1
	ld	a, e
	OUT0	(UART_TX),A
	inc	hl
	jr	STROUT
;
CONOUT:
	ld	e, a
CT1:
	IN0	A,(UARTCR_180)
	BIT	1,A
	JR	Z,CT1
	ld	a, e
	OUT0	(UART_TX),A
	ret
	endif

	org	($+20H) & 0fff0h
st_p:

	END			;of boot loader
